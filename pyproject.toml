# Copyright 2025 Lincoln Institute of Land Policy
# SPDX-License-Identifier: Apache-2.0

[project]
name = "arizonawaterobservatory"
version = "0.1.0"
description = "A datahub for water data in Arizona"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "opentelemetry-instrumentation-aiohttp-client>=0.56b0",
    "opentelemetry-exporter-otlp>=1.35.0",
    "orjson>=3.11.0",
    "covjson-pydantic>=0.7.0",
    "geojson-pydantic>=2.0.0",
    "redis>=6.2.0",
    "usace",
    "com",
    "rise",
    "snotel",
    "awdb_com",
    "awdb_forecasts",
    "noaa_rfc",
    "aiohttp>=3.12.12",
    "xarray>=2025.4.0",
    "zarr>=2.18.7",
    "netcdf4>=1.7.2",
    "s3fs>=2025.9.0",
]

[dependency-groups]
dev = [
    "pyright>=1.1.401",
    "pytest>=8.4.0",
    "pytest-xdist>=3.7.0",
    "radon>=6.0.1",
]
server = [
    "pygeoapi @ git+https://github.com/internetofwater/pygeoapi.git@wwdh",
    "starlette>=0.47.0",
    "uvicorn>=0.34.3",
]

[tool.uv.workspace]
members = ["packages/*"]

[tool.uv.sources]
# it appears that to get the latest code you need to specify the HEAD branch of each package
usace = { git = "https://github.com/internetofwater/Western-Water-Datahub.git", subdirectory = "packages/usace", branch="main" }
com = { git = "https://github.com/internetofwater/Western-Water-Datahub.git", subdirectory = "packages/com", branch="main" }
rise = { git = "https://github.com/internetofwater/Western-Water-Datahub.git", subdirectory = "packages/rise" , branch="main" }
snotel = { git = "https://github.com/internetofwater/Western-Water-Datahub.git", subdirectory = "packages/snotel" , branch="main" }
awdb_com = { git = "https://github.com/internetofwater/Western-Water-Datahub.git", subdirectory = "packages/awdb_com" , branch="main" }
awdb_forecasts = { git = "https://github.com/internetofwater/Western-Water-Datahub.git", subdirectory = "packages/awdb_forecasts", branch="main" }
noaa_rfc = { git = "https://github.com/internetofwater/Western-Water-Datahub.git", subdirectory = "packages/noaa_rfc" , branch="main" }

[tool.coverage.run]
# don't include tests 
omit = [
    "**/*_test.py",
    "test/",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]

# ruff will automatically format long lines
# and remove trailing whitespace; these ignores
# are simply to handle cases like large sparql
# query strings or other literals that cannot be
# formatted safely and thus we would end up ignoring anyways 
ignore = [
 "E501", # line too long 
 "W291"  # trailing whitespace
 ]

[tool.ruff.lint.isort]
# Sort imports taking into account case sensitivity.
case-sensitive = true
# Don't sort straight-style imports (like import sys) before from-style imports (like from itertools import groupby). Instead, sort the imports by module, independent of import style.
force-sort-within-sections = true
# Order imports by type, which is determined by case, in addition to alphabetically.
# By putting this to false we can force the order to be alphabetical.
order-by-type = false
